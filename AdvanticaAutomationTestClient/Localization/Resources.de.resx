<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddWorkerAddWorker" xml:space="preserve">
    <value>Arbeitskraft hinzufügen</value>
  </data>
  <data name="AddWorkerAddWorkerWizzard" xml:space="preserve">
    <value>Assistent zum hinzufügen</value>
  </data>
  <data name="AddWorkerBirtday" xml:space="preserve">
    <value>*Geburtsdatum</value>
  </data>
  <data name="AddWorkerError" xml:space="preserve">
    <value>Fehler</value>
  </data>
  <data name="AddWorkerFemale" xml:space="preserve">
    <value>Feminin</value>
  </data>
  <data name="AddWorkerFillRequiredFields" xml:space="preserve">
    <value>Füllen sie alle erforderlichen felder aus!</value>
  </data>
  <data name="AddWorkerFirstName" xml:space="preserve">
    <value>*Nomen</value>
  </data>
  <data name="AddWorkerHaveChildrens" xml:space="preserve">
    <value>*Kinder haben?</value>
  </data>
  <data name="AddWorkerLastName" xml:space="preserve">
    <value>*Nachname</value>
  </data>
  <data name="AddWorkerMale" xml:space="preserve">
    <value>Männlich</value>
  </data>
  <data name="AddWorkerMiddleName" xml:space="preserve">
    <value>Vorname</value>
  </data>
  <data name="AddWorkerNo" xml:space="preserve">
    <value>Nein</value>
  </data>
  <data name="AddWorkerRequired" xml:space="preserve">
    <value>* - erforderlicher parameter</value>
  </data>
  <data name="AddWorkerSex" xml:space="preserve">
    <value>Etage des arbeiters</value>
  </data>
  <data name="AddWorkerSuccessfullyCreated" xml:space="preserve">
    <value> erfolgreich erstellt</value>
  </data>
  <data name="AddWorkerTakeAdministrator" xml:space="preserve">
    <value>Hoppla, etwas ist schief gelaufen. Wenden Sie sich an Ihren Administrator</value>
  </data>
  <data name="AddWorkerWorker" xml:space="preserve">
    <value>Arbeiter</value>
  </data>
  <data name="AddWorkerWorkerSuccessfullyAdded" xml:space="preserve">
    <value>Arbeiter hinzugefügt</value>
  </data>
  <data name="AddWorkerYes" xml:space="preserve">
    <value>Ja</value>
  </data>
  <data name="MainAddWorker" xml:space="preserve">
    <value>Arbeitskraft hinzufügen</value>
  </data>
  <data name="MainAreYouSureToDeleteWorker" xml:space="preserve">
    <value>Sind Sie sicher, dass Sie den Worker löschen möchten?</value>
  </data>
  <data name="MainBirthday" xml:space="preserve">
    <value>Geburtsdatum:</value>
  </data>
  <data name="MainChangeWorkerData" xml:space="preserve">
    <value>Um die Daten zu ändern</value>
  </data>
  <data name="MainDeleteWorker" xml:space="preserve">
    <value>Arbeiter löschen</value>
  </data>
  <data name="MainDeletingWorker" xml:space="preserve">
    <value>Einen Arbeiter löschen</value>
  </data>
  <data name="MainFemale" xml:space="preserve">
    <value>Feminin</value>
  </data>
  <data name="MainHaveChildrens" xml:space="preserve">
    <value>Kinder haben:</value>
  </data>
  <data name="MainMale" xml:space="preserve">
    <value>Männlich</value>
  </data>
  <data name="MainNo" xml:space="preserve">
    <value>Nein</value>
  </data>
  <data name="MainSelectDeleteWorker" xml:space="preserve">
    <value>Wählen Sie den Arbeiter aus, den Sie löschen möchten!</value>
  </data>
  <data name="MainSelectedWorker" xml:space="preserve">
    <value>Ausgewählter Arbeiter</value>
  </data>
  <data name="MainSelectedWorkerBirthday" xml:space="preserve">
    <value>Geburtsdatum:</value>
  </data>
  <data name="MainSelectedWorkerFLM" xml:space="preserve">
    <value>Vollständiger Name:</value>
  </data>
  <data name="MainSelectedWorkerHaveChildrens" xml:space="preserve">
    <value>Kinder haben:</value>
  </data>
  <data name="MainSelectedWorkerSex" xml:space="preserve">
    <value>Etage des arbeiters</value>
  </data>
  <data name="MainSelectUpdateWorker" xml:space="preserve">
    <value>Wählen Sie den Arbeitnehmer aus, den Sie ändern möchten!</value>
  </data>
  <data name="MainSex" xml:space="preserve">
    <value>Etage des arbeiters:</value>
  </data>
  <data name="MainUndefined" xml:space="preserve">
    <value>Nicht definiert</value>
  </data>
  <data name="MainWorkerList" xml:space="preserve">
    <value>Eine Liste der Mitarbeiter</value>
  </data>
  <data name="MainWorkerNotSelected" xml:space="preserve">
    <value>Kein Arbeiter ausgewählt</value>
  </data>
  <data name="MainWorkerRemoved" xml:space="preserve">
    <value>Arbeiter entfernt</value>
  </data>
  <data name="MainWorkerSuccessfullyRemoved" xml:space="preserve">
    <value>Worker erfolgreich gelöscht!</value>
  </data>
  <data name="MainYes" xml:space="preserve">
    <value>Ja</value>
  </data>
  <data name="UpdateWorkerBirthday" xml:space="preserve">
    <value>*Geburtsdatum</value>
  </data>
  <data name="UpdateWorkerFemale" xml:space="preserve">
    <value>Feminin</value>
  </data>
  <data name="UpdateWorkerFirstName" xml:space="preserve">
    <value>*Nomen</value>
  </data>
  <data name="UpdateWorkerHaveChildrens" xml:space="preserve">
    <value>*Kinder haben?</value>
  </data>
  <data name="UpdateWorkerLastName" xml:space="preserve">
    <value>*Nachname</value>
  </data>
  <data name="UpdateWorkerMale" xml:space="preserve">
    <value>Männlich</value>
  </data>
  <data name="UpdateWorkerMiddleName" xml:space="preserve">
    <value>Vorname</value>
  </data>
  <data name="UpdateWorkerNo" xml:space="preserve">
    <value>Nein</value>
  </data>
  <data name="UpdateWorkerRequired" xml:space="preserve">
    <value>* - erforderlicher parameter</value>
  </data>
  <data name="UpdateWorkerSex" xml:space="preserve">
    <value>Etage des arbeiters</value>
  </data>
  <data name="UpdateWorkerUpdateWorker" xml:space="preserve">
    <value>Arbeitnehmer wechseln</value>
  </data>
  <data name="UpdateWorkerUpdateWorkerWizzard" xml:space="preserve">
    <value>Assistent zum Arbeitnehmerwechsel</value>
  </data>
  <data name="UpdateWorkerYes" xml:space="preserve">
    <value>Ja</value>
  </data>
</root>